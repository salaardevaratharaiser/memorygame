{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOFhWauGSxKB24FtsaVrC+G",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/salaardevaratharaiser/memorygame/blob/main/audio%20to%20speech\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KEnKvtqjBbu9",
        "outputId": "0611a9ba-d9c9-4b71-b997-f28064474891"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting SpeechRecognition\n",
            "  Downloading speechrecognition-3.14.3-py3-none-any.whl.metadata (30 kB)\n",
            "Collecting pyttsx3\n",
            "  Downloading pyttsx3-2.98-py3-none-any.whl.metadata (3.8 kB)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from SpeechRecognition) (4.13.2)\n",
            "Downloading speechrecognition-3.14.3-py3-none-any.whl (32.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m32.9/32.9 MB\u001b[0m \u001b[31m45.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pyttsx3-2.98-py3-none-any.whl (34 kB)\n",
            "Installing collected packages: pyttsx3, SpeechRecognition\n",
            "Successfully installed SpeechRecognition-3.14.3 pyttsx3-2.98\n"
          ]
        }
      ],
      "source": [
        "!pip install SpeechRecognition pyttsx3"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "import speech_recognition as sr\n",
        "import pyttsx3\n",
        "import re"
      ],
      "metadata": {
        "id": "a8Z5TyBkDAS0"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 38
        },
        "id": "Bzh9m94CBmvs",
        "outputId": "239371ed-7161-4453-ab73-b85c496a93a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-368ba10a-9703-407c-b332-49940cf4765b\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-368ba10a-9703-407c-b332-49940cf4765b\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "engine = pyttsx3.init()"
      ],
      "metadata": {
        "id": "piM-bm7eBmsk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def speak(text):\n",
        "    engine.say(text)\n",
        "    engine.runAndWait()"
      ],
      "metadata": {
        "id": "bjuXPgjBBmpN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def recognize_audio(audio_file):\n",
        "    recognizer = sr.Recognizer()\n",
        "     with sr.AudioFile(audio_file) as source:\n",
        "        print(\"Processing audio...\")\n",
        "        audio = recognizer.record(source)  # Read the entire audio file\n",
        "        try:\n",
        "            # Recognize speech using Google Speech Recognition API\n",
        "            command = recognizer.recognize_google(audio)\n",
        "            print(f\"Recognized text: {command}\")\n",
        "            return command\n",
        "        except sr.UnknownValueError:\n",
        "            print(\"Sorry, I could not understand the audio.\")\n",
        "            return None\n",
        "        except sr.RequestError:\n",
        "            print(\"Sorry, the speech service is unavailable.\")\n",
        "            return None\n"
      ],
      "metadata": {
        "id": "h97t8TL2BmmM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "import speech_recognition as sr\n",
        "import pyttsx3\n",
        "import re\n",
        "from pydub import AudioSegment\n",
        "import os # Import the os module for file operations\n",
        "\n",
        "# Rest of your code remains the same:\n",
        "# %%\n",
        "uploaded = files.upload()\n",
        "# %%\n",
        "engine = pyttsx3.init()\n",
        "# %%\n",
        "def speak(text):\n",
        "    engine.say(text)\n",
        "    engine.runAndWait()\n",
        "# %%\n",
        "def recognize_audio(audio_file):\n",
        "    recognizer = sr.Recognizer()\n",
        "\n",
        "    try:\n",
        "        # Load the audio file using pydub\n",
        "        audio = AudioSegment.from_file(audio_file)\n",
        "\n",
        "        # Define a temporary WAV file name\n",
        "        wav_file = \"temp_audio.wav\"\n",
        "\n",
        "        # Export the audio to WAV format\n",
        "        audio.export(wav_file, format=\"wav\")\n",
        "\n",
        "        # Use the converted WAV file with speech_recognition\n",
        "        with sr.AudioFile(wav_file) as source:\n",
        "            print(\"Processing audio...\")\n",
        "            audio = recognizer.record(source)  # Read the entire audio file\n",
        "            try:\n",
        "                # Recognize speech using Google Speech Recognition API\n",
        "                command = recognizer.recognize_google(audio)\n",
        "                print(f\"Recognized text: {command}\")\n",
        "                return command\n",
        "            except sr.UnknownValueError:\n",
        "                print(\"Sorry, I could not understand the audio.\")\n",
        "                return None\n",
        "            except sr.RequestError:\n",
        "                print(\"Sorry, the speech service is unavailable.\")\n",
        "                return None\n",
        "        finally:\n",
        "            # Remove the temporary WAV file\n",
        "            if os.path.exists(wav_file):\n",
        "                os.remove(wav_file)\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"Error processing audio file: {e}\")\n",
        "        return None\n",
        "\n",
        "# Rest of your code remains the same:\n",
        "# %%\n",
        "def calculate(command):\n",
        "    try:\n",
        "        # Replace words for operators with symbols\n",
        "        command = command.replace(\"minus\", \"-\").replace(\"plus\", \"+\").replace(\"times\", \"*\").replace(\"divided by\", \"/\")\n",
        "        # Remove unwanted characters\n",
        "        command = re.sub(r\"[^0-9+\\-*/.]\", \"\", command)\n",
        "        # Evaluate the expression\n",
        "        result = eval(command)\n",
        "        return result\n",
        "    except Exception as e:\n",
        "        print(\"Error with the command.\")\n",
        "        return \"Sorry, there was an error processing the command.\"\n",
        "\n",
        "# Step 6: Process the uploaded audio file\n",
        "audio_file = list(uploaded.keys())[0]\n",
        "command = recognize_audio(audio_file)\n",
        "\n",
        "if command:\n",
        "    result = calculate(command)\n",
        "    print(f\"Result: {result}\")\n",
        "    speak(f\"The result is {result}\")\n",
        "else:\n",
        "    print(\"No valid command detected.\")"
      ],
      "metadata": {
        "id": "qGIrMf3TFYFr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate(command):\n",
        "    try:\n",
        "        # Replace words for operators with symbols\n",
        "        command = command.replace(\"minus\", \"-\").replace(\"plus\", \"+\").replace(\"times\", \"*\").replace(\"divided by\", \"/\")\n",
        "        # Remove unwanted characters\n",
        "        command = re.sub(r\"[^0-9+\\-*/.]\", \"\", command)\n",
        "        # Evaluate the expression\n",
        "        result = eval(command)\n",
        "        return result\n",
        "    except Exception as e:\n",
        "        print(\"Error with the command.\")\n",
        "        return \"Sorry, there was an error processing the command.\"\n",
        "\n",
        "# Step 6: Process the uploaded audio file\n",
        "audio_file = list(uploaded.keys())[0]\n",
        "command = recognize_audio(audio_file)\n",
        "\n",
        "if command:\n",
        "    result = calculate(command)\n",
        "    print(f\"Result: {result}\")\n",
        "    speak(f\"The result is {result}\")\n",
        "else:\n",
        "    print(\"No valid command detected.\")"
      ],
      "metadata": {
        "id": "dudliS7eBmis"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}